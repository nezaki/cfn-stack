#  export AWS_ACCESS_KEY_ID=
#  export AWS_SECRET_ACCESS_KEY=
#
#  export EnvironmentName=dev
#  export SystemName=test
#
#  aws cloudformation create-stack \
#      --template-body file:///path/to/cfn-stack/vpc.yaml \
#      --stack-name ${EnvironmentName}-vpc \
#      --parameters ParameterKey=EnvironmentName,ParameterValue=$EnvironmentName \
#                   ParameterKey=SystemName,ParameterValue=$SystemName

AWSTemplateFormatVersion: 2010-09-09
Description: Create AWS CloudFormation

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  SystemName:
    Description: Name of this system.
    Type: String

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-vpc01

  SubnetPublic0101:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.1.0.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-public-subnet-01-01

  SubnetPublic0201:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.1.16.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-public-subnet-02-01

  SubnetPrivate0101:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.1.32.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-private-subnet-01-01

  SubnetPrivate0201:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.1.48.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-private-subnet-02-01

  SubnetPrivate0102:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.1.64.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-private-subnet-01-02

  SubnetPrivate0202:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.1.80.0/20
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-private-subnet-02-02

  PublicRouteTable01:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-public-route-01

  PublicRouteTable02:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-public-route-02

  PrivateRouteTable01:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-private-route-01

  PrivateRouteTable02:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-private-route-02

  PublicSubnetRouteTableAssociation0101:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic0101
      RouteTableId: !Ref PublicRouteTable01

  PublicSubnetRouteTableAssociation0201:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic0201
      RouteTableId: !Ref PublicRouteTable02

  PrivateSubnetRouteTableAssociation0101:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate0101
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnetRouteTableAssociation0201:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate0201
      RouteTableId: !Ref PrivateRouteTable02

  PrivateSubnetRouteTableAssociation0102:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate0102
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnetRouteTableAssociation0202:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate0202
      RouteTableId: !Ref PrivateRouteTable02

  SecurityGroupAPI:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${EnvironmentName}-${SystemName}-sg-api
      GroupDescription: !Sub ${EnvironmentName}-${SystemName}
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 10.1.0.0/16
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-sg-api

  SecurityGroupMySQL:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${EnvironmentName}-${SystemName}-sg-mysql
      GroupDescription: !Sub ${EnvironmentName}-${SystemName}
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 10.1.0.0/16
          FromPort: 3306
          ToPort: 3306
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${SystemName}-sg-mysql

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  InternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - NatGatewayElasticIP
        - AllocationId
      SubnetId: !Ref SubnetPublic0101

  NatGatewayElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: !Ref VPC

  NatGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

Outputs:
  VpcId:
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-VPC

  VpcCidr:
    Value: 10.1.0.0/16
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-VPCCidr

  SubnetPublic0101Id:
    Value: !Ref SubnetPublic0101
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-SubnetPublic0101

  SubnetPublic0201Id:
    Value: !Ref SubnetPublic0201
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-SubnetPublic0201

  SubnetPrivate0101Id:
    Value: !Ref SubnetPrivate0101
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-SubnetPrivate0101

  SubnetPrivate0201Id:
    Value: !Ref SubnetPrivate0201
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-SubnetPrivate0201

  SubnetPrivate0102Id:
    Value: !Ref SubnetPrivate0102
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-SubnetPrivate0102

  SubnetPrivate0202Id:
    Value: !Ref SubnetPrivate0202
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-SubnetPrivate0202

  SecurityGroupMySQLId:
    Value: !Ref SecurityGroupMySQL
    Export:
      Name: !Sub ${EnvironmentName}-${SystemName}-SecurityGroupMySQL
