#  export AWS_ACCESS_KEY_ID=
#  export AWS_SECRET_ACCESS_KEY=
#
#  export EnvironmentName=dev
#  export SystemName=test
#
#  aws cloudformation create-stack \
#      --template-body file:///path/to/cfn-stack/cloudfront-s3.yaml \
#      --stack-name ${EnvironmentName}-cloudfront-s3-web \
#      --parameters ParameterKey=EnvironmentName,ParameterValue=$EnvironmentName \
#                   ParameterKey=SystemName,ParameterValue=$SystemName

AWSTemplateFormatVersion: 2010-09-09
Description: Create S3 and CloudFront Resources

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  SystemName:
    Description: Name of this system.
    Type: String

Resources:

  S3BucketLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub ${EnvironmentName}-${SystemName}-web-logs
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  S3BucketWeb:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub ${EnvironmentName}-${SystemName}-web
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketWeb
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${S3BucketWeb}/*
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}

  CloudFrontFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: basic-auth
      FunctionConfig:
        Comment: Set up basic authentication
        Runtime: cloudfront-js-1.0
      AutoPublish: true
      FunctionCode:
        !Sub |
          function handler(event) {
            var request = event.request;
            var headers = request.headers;

            // echo -n user:pass | base64
            var authString = "Basic dXNlcjpwYXNz";

            if (
              typeof headers.authorization === "undefined" ||
              headers.authorization.value !== authString
            ) {
              return {
                statusCode: 401,
                statusDescription: "Unauthorized",
                headers: { "www-authenticate": { value: "Basic" } }
              };
            }
            return request;
          }

  Distribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - S3BucketWeb
    Properties:
      DistributionConfig:
        Origins:
          # https://aws.amazon.com/jp/premiumsupport/knowledge-center/s3-http-307-response/
          - Id: !Sub S3-${EnvironmentName}-${SystemName}-web
            DomainName:
              Fn::Join:
              - ""
              - - !Sub ${EnvironmentName}-${SystemName}-web.s3-ap-northeast-1.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        HttpVersion: http2
        Enabled: true
        IPV6Enabled: true
        DefaultRootObject: index.html
        Comment: !Sub ${AWS::StackName} distribution
        DefaultCacheBehavior:
          TargetOriginId: !Sub S3-${EnvironmentName}-${SystemName}-web
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          DefaultTTL: 3600
          MaxTTL: 3600
          MinTTL: 0
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt CloudFrontFunction.FunctionARN
        CustomErrorResponses:
        - ErrorCode: 403
          ResponsePagePath: /index.html
          ResponseCode: 200
          ErrorCachingMinTTL: 0
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1.2_2019
          CloudFrontDefaultCertificate: true
        Logging:
          Bucket: !GetAtt S3BucketLogs.DomainName
          IncludeCookies: false
